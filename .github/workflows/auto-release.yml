name: Auto Release on Version Change

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check-version:
    name: Check for version changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      new-version: ${{ steps.version-check.outputs.version }}
      tag-exists: ${{ steps.tag-check.outputs.exists }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit to compare

      - name: Get current version
        id: current-version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get previous version
        id: previous-version
        run: |
          git checkout HEAD~1 -- pyproject.toml || echo "No previous version"
          if [ -f pyproject.toml ]; then
            PREV_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/' || echo "none")
          else
            PREV_VERSION="none"
          fi
          echo "version=$PREV_VERSION" >> $GITHUB_OUTPUT
          git checkout HEAD -- pyproject.toml  # Restore current version

      - name: Check if version changed
        id: version-check
        run: |
          CURRENT="${{ steps.current-version.outputs.version }}"
          PREVIOUS="${{ steps.previous-version.outputs.version }}"
          echo "Current version: $CURRENT"
          echo "Previous version: $PREVIOUS"
          
          if [ "$CURRENT" != "$PREVIOUS" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT" >> $GITHUB_OUTPUT
            echo "‚úÖ Version changed from $PREVIOUS to $CURRENT"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "version=$CURRENT" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  Version unchanged: $CURRENT"
          fi

      - name: Check if tag already exists
        id: tag-check
        run: |
          VERSION="${{ steps.current-version.outputs.version }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Tag v$VERSION already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Tag v$VERSION does not exist"
          fi

  auto-release:
    name: Create automatic release
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.version-changed == 'true' && needs.check-version.outputs.tag-exists == 'false'
    permissions:
      contents: write
      actions: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Validate version format
        run: |
          VERSION="${{ needs.check-version.outputs.new-version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix (e.g., 1.0.0, 1.0.0-alpha)"
            exit 1
          fi
          echo "‚úÖ Valid version format: $VERSION"

      - name: Set up Python and uv
        uses: astral-sh/setup-uv@v2

      - name: Run release preparation
        run: |
          echo "üöÄ Running automated release preparation for v${{ needs.check-version.outputs.new-version }}"
          
          # Install dependencies
          uv sync --dev
          
          # Run tests
          echo "üß™ Running tests..."
          uv run pytest tests/ -v
          
          # Check code formatting (but don't fail on this)
          echo "üé® Checking code formatting..."
          uv run ruff format --check src/ tests/ examples/ || echo "‚ö†Ô∏è  Code formatting issues found but continuing..."
          
          # Build Rust extension
          echo "ü¶Ä Building Rust extension..."
          uv run maturin develop
          
          echo "‚úÖ Release preparation completed successfully"

      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION="${{ needs.check-version.outputs.new-version }}"
          echo "üìã Extracting changelog for version $VERSION"
          
          # Try to extract changelog section for this version
          if [ -f CHANGELOG.md ]; then
            # Look for version header and extract content until next version or end
            CHANGELOG_CONTENT=$(awk "/^## \[?v?$VERSION\]?/ {flag=1; next} /^## \[?v?[0-9]/ {flag=0} flag" CHANGELOG.md || echo "")
            
            if [ -n "$CHANGELOG_CONTENT" ]; then
              echo "‚úÖ Found changelog content for v$VERSION"
              # Save to file to handle multiline content
              echo "$CHANGELOG_CONTENT" > /tmp/changelog.txt
            else
              echo "‚ö†Ô∏è  No specific changelog found for v$VERSION, using default"
              echo "See CHANGELOG.md for details about this release." > /tmp/changelog.txt
            fi
          else
            echo "‚ö†Ô∏è  No CHANGELOG.md found, using default content"
            echo "Automatic release for version $VERSION" > /tmp/changelog.txt
          fi

      - name: Create and push tag
        run: |
          VERSION="${{ needs.check-version.outputs.new-version }}"
          
          # Configure git with the GitHub token
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Create annotated tag
          git tag -a "v$VERSION" -m "Release v$VERSION

          Automatically created from version change in pyproject.toml
          
          $(cat /tmp/changelog.txt)"
          
          # Push tag using GITHUB_TOKEN
          git push origin "v$VERSION"
          
          echo "‚úÖ Created and pushed tag v$VERSION"

      - name: Wait for wheels workflow
        run: |
          echo "‚è≥ Triggering wheel building workflow..."

      - name: Trigger wheels workflow
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ needs.check-version.outputs.new-version }}";
            console.log(`Triggering wheels workflow for version ${version}`);
            
            try {
              const result = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'wheels.yml',
                ref: 'main',
                inputs: {
                  version: `v${version}`
                }
              });
              console.log('‚úÖ Successfully triggered wheels workflow');
            } catch (error) {
              console.error('‚ùå Failed to trigger wheels workflow:', error);
              throw error;
            }

  notify-skip:
    name: Notify why release was skipped
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.version-changed != 'true' || needs.check-version.outputs.tag-exists == 'true'
    
    steps:
      - name: Explain why release was skipped
        run: |
          if [ "${{ needs.check-version.outputs.version-changed }}" != "true" ]; then
            echo "‚ÑπÔ∏è  No release created: Version unchanged (${{ needs.check-version.outputs.new-version }})"
          elif [ "${{ needs.check-version.outputs.tag-exists }}" == "true" ]; then
            echo "‚ö†Ô∏è  No release created: Tag v${{ needs.check-version.outputs.new-version }} already exists"
          fi
