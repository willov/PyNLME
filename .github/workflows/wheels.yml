name: Build and publish wheels

on:
  push:
    tags:
      - "v*"
  release:
    types: [published]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: false
        default: ''

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Sync project
        run: uv sync

      - name: Build wheels
        run: uv run cibuildwheel --output-dir wheelhouse
        env:
          # Configure cibuildwheel to build for Python 3.11+
          CIBW_BUILD: "cp311-* cp312-* cp313-*"
          # Skip 32-bit builds and PyPy for now
          CIBW_SKIP: "*-win32 *-manylinux_i686 pp*"
          # Use latest dependencies for faster builds
          CIBW_DEPENDENCY_VERSIONS: "latest"
          # Test the built wheels with a simple import test
          CIBW_TEST_REQUIRES: "pytest numpy scipy"
          CIBW_TEST_COMMAND: "python -c 'import pynlme; print(f\"PyNLME {pynlme.__version__} imported successfully\")'"

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Sync project
        run: uv sync

      - name: Build sdist
        run: uv build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_github_release:
    name: Upload to GitHub Release
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || github.event_name == 'release'
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Debug trigger information
        run: |
          echo "🔍 Workflow trigger debug info:"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Ref starts with refs/tags/v: ${{ startsWith(github.ref, 'refs/tags/v') }}"
          echo "Should upload: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}"

      - uses: actions/download-artifact@v4
        with:
          pattern: "wheels-*"
          path: dist
          merge-multiple: true
      
      - uses: actions/download-artifact@v4
        with:
          name: cibw-sdist
          path: dist

      - name: List all artifacts
        run: |
          echo "📦 Contents of dist directory:"
          ls -la dist/
          echo ""
          echo "🔍 All files to be uploaded:"
          find dist/ -type f -name "*.whl" -o -name "*.tar.gz"
          echo ""
          echo "📊 File count:"
          echo "Wheels: $(find dist/ -name "*.whl" | wc -l)"
          echo "Sdist: $(find dist/ -name "*.tar.gz" | wc -l)"

      - name: Extract version and changelog
        id: release-info
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Try to extract changelog for this version
          if [ -f CHANGELOG.md ]; then
            CHANGELOG_CONTENT=$(awk "/^## \[?v?$VERSION\]?/ {flag=1; next} /^## \[?v?[0-9]/ {flag=0} flag" CHANGELOG.md || echo "")
            if [ -n "$CHANGELOG_CONTENT" ]; then
              echo "Found changelog content for v$VERSION"
              echo "$CHANGELOG_CONTENT" > /tmp/release_notes.md
            else
              echo "No specific changelog found for v$VERSION"
              echo "See [CHANGELOG.md](https://github.com/willov/PyNLME/blob/main/CHANGELOG.md) for details about this release." > /tmp/release_notes.md
            fi
          else
            echo "Automatic release for PyNLME v$VERSION" > /tmp/release_notes.md
            echo "" >> /tmp/release_notes.md
            echo "This is a proof-of-concept implementation. Please use with caution and report any issues." >> /tmp/release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          name: "PyNLME v${{ steps.release-info.outputs.version }}"
          body_path: /tmp/release_notes.md
          draft: false
          prerelease: true  # Mark as pre-release since it's proof-of-concept
          fail_on_unmatched_files: true
